# API自动化测试命令行工具配置文件
# 包含用例配置、LLM配置、请求配置、约束配置和内置数据集

[testcase]
# 用例生成数量
num = 10

# 输出文件路径
output = "test_cases.csv"

# 正例报文类型（xml或json）
type = "json"

# 正例报文（支持多行字符串）
positive_example = '''
{
  "user": {
    "name": "张三",
    "age": 25,
    "phone": "13800138000",
    "email": "zhangsan@example.com",
    "address": "北京市朝阳区建国门外大街1号",
    "id_card": "110101199001011234",
    "bank_card": "6222021234567890"
  },
  "order": {
    "id": 12345,
    "amount": 199.99,
    "price": 299.50,
    "quantity": 2,
    "status": 1,
    "create_date": "20240101",
    "create_datetime": "2024-01-01T10:30:00.000+08:00"
  },
  "system": {
    "datetime": "2024-01-01T10:30:00.000Z",
    "count": 100
  }
}
'''

# 如果需要使用XML格式，可以这样配置：
# type = "xml"
# positive_example = '''
# <request>
#   <user>
#     <name>张三</name>
#     <age>25</age>
#     <phone>13800138000</phone>
#     <email>zhangsan@example.com</email>
#     <address>北京市朝阳区建国门外大街1号</address>
#     <id_card>110101199001011234</id_card>
#     <bank_card>6222021234567890</bank_card>
#   </user>
#   <order>
#     <id>12345</id>
#     <amount>199.99</amount>
#     <price>299.50</price>
#     <quantity>2</quantity>
#     <status>1</status>
#     <create_date>20240101</create_date>
#     <create_datetime>2024-01-01T10:30:00.000+08:00</create_datetime>
#   </order>
#   <system>
#     <datetime>2024-01-01T10:30:00.000Z</datetime>
#     <count>100</count>
#   </system>
# </request>
# '''

[llm]
# LLM API Base URL
url = "http://localhost/v1"

# LLM API Key
api_key = "app-uS9lBUxxxxxxxxlxhggy7"

# 自定义提示词（可选）
user_prompt = "请生成边界情况的测试用例，包括空值、极值、特殊字符等场景"

[request]
# 目标URL
url = "https://httpbin.org/post"

# 请求方法
method = "post"

# CSV测试用例文件路径
file = "test_cases.csv"

# 结果保存路径
save_path = "results.csv"

# 请求超时时间（秒）
timeout = 30

# 并发请求数
concurrent = 3

# Bearer Token认证
# auth_bearer = "your_bearer_token_here"

# Basic Auth认证（格式：username:password）
# auth_basic = "username:password"

# API Key认证
# auth_api_key = "your_api_key_here"

# 自定义HTTP头（数组格式）
# headers = [
#     "X-API-Version: v1",
#     "X-Client-ID: atc-tool",
#     "X-Request-Source: automated-test"
# ]

# 约束系统配置，下列均为示例配置，可根据自身需求调整
[constraints]
# 约束系统开关（true: 启用约束系统，false: 使用随机变化模式）
enable = true

# 保持原值不变的字段约束
[constraints.Head]
type = "keep_original"
description = "保持Head节点及其所有子字段的原值不变"

# 日期字段约束
[constraints.date]
type = "date"
format = "20060102"              # Go时间格式
min_date = "20200101"
max_date = "20301231"
description = "日期字段，格式为YYYYMMDD"

[constraints.create_date]
type = "date"
format = "20060102"
min_date = "20200101"
max_date = "20301231"

[constraints.update_date]
type = "date"
format = "20060102"
min_date = "20200101"
max_date = "20301231"

# 日期时间字段约束（RFC 3339 Extended格式）
[constraints.datetime]
type = "datetime"
min_datetime = "2020-01-01T00:00:00.000+00:00"
max_datetime = "2030-12-31T23:59:59.999+00:00"
timezone = "UTC"
description = "RFC 3339 Extended格式的日期时间"

[constraints.create_datetime]
type = "datetime"
min_datetime = "2020-01-01T00:00:00.000+08:00"
max_datetime = "2030-12-31T23:59:59.999+08:00"
timezone = "+08:00"
description = "北京时间的日期时间"

[constraints.update_datetime]
type = "datetime"
min_datetime = "2025-01-01T00:00:00.000Z"
max_datetime = "2025-12-31T23:59:59.999Z"
timezone = "Asia/Shanghai"
description = "使用IANA时区的日期时间"

[constraints.transaction_datetime]
type = "datetime"
min_datetime = "2024-01-01T00:00:00.000+00:00"
max_datetime = "2025-12-31T23:59:59.999+00:00"
timezone = "UTC"
description = "交易日期时间，RFC 3339 Extended格式"

# 姓名字段约束
[constraints.name]
type = "chinese_name"
description = "中文姓名"

[constraints.user_name]
type = "chinese_name"

[constraints.username]
type = "chinese_name"

[constraints.real_name]
type = "chinese_name"

# 年龄字段约束
[constraints.age]
type = "integer"
min = 1
max = 120
description = "年龄范围1-120"

# 手机号字段约束
[constraints.phone]
type = "phone"
description = "中国大陆手机号"

[constraints.mobile]
type = "phone"

[constraints.phone_number]
type = "phone"

# 邮箱字段约束
[constraints.email]
type = "email"
description = "邮箱地址"

[constraints.email_address]
type = "email"

# 价格字段约束
[constraints.price]
type = "float"
min = 0.01
max = 999999.99
precision = 2
description = "价格，保留2位小数"

[constraints.amount]
type = "float"
min = 0.01
max = 999999.99
precision = 2

[constraints.money]
type = "float"
min = 0.01
max = 999999.99
precision = 2

# 地址字段约束
[constraints.address]
type = "chinese_address"
description = "中文地址"

[constraints.addr]
type = "chinese_address"

[constraints.location]
type = "chinese_address"

# 身份证号字段约束
[constraints.id_card]
type = "id_card"
description = "中国身份证号"

[constraints.identity_card]
type = "id_card"

[constraints.card_no]
type = "id_card"

# 银行卡号字段约束
[constraints.bank_card]
type = "bank_card"
description = "银行卡号"

[constraints.bank_card_number]
type = "bank_card"

[constraints.card_number]
type = "bank_card"

[constraints.account_number]
type = "bank_card"

# 数量字段约束
[constraints.quantity]
type = "integer"
min = 1
max = 10000
description = "数量"

[constraints.count]
type = "integer"
min = 1
max = 10000

# 状态字段约束
[constraints.status]
type = "integer"
min = 0
max = 9
description = "状态码"

# 编号字段约束
[constraints.id]
type = "integer"
min = 1
max = 999999
description = "ID编号"

[constraints.user_id]
type = "integer"
min = 1
max = 999999

[constraints.order_id]
type = "integer"
min = 1
max = 999999

# 内置数据集
[builtin_data]

# 中文姓名数据集
first_names = ["张", "王", "李", "赵", "刘", "陈", "杨", "黄", "周", "吴", "徐", "孙", "马", "朱", "胡", "林", "郭", "何", "高", "罗", "谢", "梁", "宋", "郑", "唐", "韩", "冯", "于", "董", "萧", "程", "曹", "袁", "邓", "许", "傅", "沈", "曾", "彭", "吕", "苏", "卢", "蒋", "蔡", "贾", "丁", "魏", "薛", "叶", "阎", "余", "潘", "杜", "戴", "夏", "钟", "汪", "田", "任", "姜", "范", "方", "石", "姚", "谭", "廖", "邹", "熊", "金", "陆", "郝", "孔", "白", "崔", "康", "毛", "邱", "秦", "江", "史", "顾", "侯", "邵", "孟", "龙", "万", "段", "漕", "钱", "汤", "尹", "黎", "易", "常", "武", "乔", "贺", "赖", "龚", "文"]

last_names = ["伟", "芳", "娜", "敏", "静", "丽", "强", "磊", "军", "洋", "勇", "艳", "杰", "涛", "明", "超", "秀英", "霞", "平", "刚", "桂英", "建华", "建国", "建军", "志强", "志明", "秀兰", "秀珍", "春梅", "桂兰", "玉兰", "玉梅", "玉华", "玉珍", "桂花", "桂珍", "丽娟", "丽华", "丽萍", "丽君", "海燕", "海霞", "海英", "海华", "亦菲", "晓明", "德华", "学友", "嘉欣", "志伟", "家辉", "国荣", "雪", "冰", "梅", "兰", "竹", "菊", "莲", "荷", "桃", "李", "杏", "梨", "枫", "柳", "松", "柏", "云", "雨", "雷", "电", "风", "雪", "霜", "露", "虹", "星", "月", "阳", "光", "辉", "亮", "清", "洁", "纯", "真", "善", "美", "慧", "智", "聪", "颖", "敏", "捷", "快", "乐", "欢", "喜", "悦", "怡", "宁", "安", "康", "健", "福", "禄", "寿", "喜"]

# 中文地址数据集
addresses = ["北京市朝阳区建国门外大街1号", "上海市浦东新区陆家嘴环路1000号", "广州市天河区珠江新城花城大道85号", "深圳市南山区科技园南区深南大道9988号", "杭州市西湖区文三路259号", "南京市鼓楼区中山路1号", "武汉市武昌区中南路99号", "成都市高新区天府大道中段1388号", "重庆市渝中区解放碑步行街88号", "西安市雁塔区高新四路15号", "天津市和平区南京路128号", "苏州市工业园区苏州大道东289号", "青岛市市南区香港中路76号", "大连市中山区人民路15号", "厦门市思明区湖滨南路76号", "北京市海淀区中关村大街27号", "上海市黄浦区南京东路399号", "广州市越秀区中山五路219号", "深圳市福田区华强北路1019号", "杭州市拱墅区莫干山路1418号", "南京市玄武区玄武大道699号", "武汉市江汉区解放大道688号", "成都市锦江区春熙路169号", "重庆市江北区观音桥步行街", "西安市碑林区南大街1号", "天津市河西区友谊路35号", "苏州市姑苏区观前街178号", "青岛市崂山区海尔路63号", "大连市西岗区中山路147号", "厦门市湖里区仙岳路4666号", "沈阳市和平区太原街19号", "长春市朝阳区人民大街7520号", "哈尔滨市道里区中央大街89号", "济南市历下区泉城路180号", "郑州市金水区花园路39号", "太原市迎泽区迎泽大街269号", "石家庄市长安区中山东路216号", "呼和浩特市赛罕区新华东街31号", "银川市兴庆区解放东街361号", "兰州市城关区东岗东路638号", "西宁市城中区西大街40号", "乌鲁木齐市天山区解放南路52号", "拉萨市城关区北京中路41号", "昆明市五华区东风东路36号", "贵阳市南明区中华南路69号", "南宁市青秀区民族大道136号", "海口市龙华区海秀中路8号", "长沙市芙蓉区五一大道389号", "南昌市东湖区八一大道357号", "福州市鼓楼区五四路158号", "合肥市蜀山区长江西路478号"]

# 邮箱域名数据集
email_domains = ["qq.com", "163.com", "126.com", "gmail.com", "sina.com", "sohu.com", "hotmail.com", "yahoo.com", "139.com", "189.cn", "yeah.net", "tom.com", "foxmail.com", "outlook.com", "live.com", "msn.com", "21cn.com", "aliyun.com", "vip.sina.com", "vip.163.com", "vip.126.com", "wo.com.cn", "189.com", "139.com", "10086.cn", "10010.com", "wo.cn", "21cn.net", "china.com", "chinaren.com", "citiz.com", "cntv.cn", "eastday.com", "people.com.cn", "xinhuanet.com", "cctv.com", "chinanews.com", "ifeng.com", "sohu.net", "sina.net", "netease.com", "tencent.com", "baidu.com", "alibaba.com", "taobao.com", "tmall.com", "jd.com", "360.cn", "weibo.com", "douban.com", "zhihu.com", "bilibili.com"]

# 银行卡号数据集
bank_cards = ["6222021234567890", "6227001234567896", "6228481234567893", "6217851234567899", "6225881234567892", "6221551234567897", "6222601234567891", "6225211234567898", "6225811234567895", "6217771234567894", "6226661234567890", "6223181234567896", "6223231234567893", "6226001234567899", "6222621234567892", "6222028765432109", "6227009876543210", "6228485432167890", "6217856789012345", "6225887890123456", "6221559012345678", "6222603456789012", "6225214567890123", "6225815678901234", "6217776789012345", "6226667890123456", "6223188901234567", "6223239012345678", "6226003456789012", "6222624567890123", "6222025678901234", "6227006789012345", "6228487890123456", "6217858901234567", "6225889012345678", "6221553456789012", "6222604567890123", "6225215678901234", "6225816789012345", "6217777890123456", "6226668901234567", "6223189012345678", "6223233456789012", "6226004567890123", "6222625678901234", "6222026789012345", "6227007890123456", "6228488901234567", "6217859012345678", "6225883456789012", "6221554567890123", "6222605678901234", "6225216789012345", "6225817890123456", "6217778901234567"]

# 手机号数据集
phone_numbers = ["13812345678", "13923456789", "15034567890", "15145678901", "15256789012", "15367890123", "15578901234", "15689012345", "15790123456", "15801234567", "15912345678", "17023456789", "17134567890", "17245678901", "17356789012", "17567890123", "17678901234", "17789012345", "17890123456", "17901234567", "18012345678", "18123456789", "18234567890", "18345678901", "18556789012", "18667890123", "18778901234", "18889012345", "18990123456", "19001234567", "13698765432", "13787654321", "15076543210", "15165432109", "15254321098", "15343210987", "15532109876", "15621098765", "15710987654", "15809876543", "15998765432", "17087654321", "17176543210", "17265432109", "17354321098", "17543210987", "17632109876", "17721098765", "17810987654", "17909876543", "18098765432", "18187654321", "18276543210", "18365432109", "18554321098", "18643210987", "18732109876", "18821098765", "18910987654", "19009876543"]

# 身份证号数据集
id_cards = ["110101199001011234", "110102198912152367", "110105199203084521", "110108198807196789", "110111199506231045", "310101199101011239", "310104198905174582", "310107199208093746", "310110198711285639", "310113199404127854", "440101199201011244", "440103198806259371", "440106199109143658", "440111198712087425", "440114199503196742", "500101199301011249", "500103198904258736", "500106199107142859", "500108198810076314", "500112199405183627", "510101199401011254", "510104198903174825", "510107199106089463", "510111198809235748", "510114199502147396", "320101199501011259", "320104198902186374", "320106199105073829", "320111198807294651", "320114199403158742", "330101199601011264", "330103199004237586", "330106199107149372", "330108198811065849", "330111199502284173", "420101199701011269", "420104199005186374", "420107199108072951", "420111198812143687", "420114199403259748", "210101199801125836", "210103199206084729", "210106198909173654", "210111199104258371", "210114198807146925", "370101199902087413", "370104199305174826", "370107198908063759", "370111199201149382", "370114198804275641", "610101200003156789", "610104199906082374", "610107199408175926", "610111199011234587", "610114198705169348", "130101200104238756", "130104199907153829", "130107199502086471", "130111199208174635", "130114198903259748"]
