name: Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送以 'v' 开头的标签

permissions:
  contents: write  # 需要写权限来创建 release

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "以下文件需要格式化："
            gofmt -s -l .
            exit 1
          fi

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test  # 依赖测试任务成功完成
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，用于生成变更日志

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binaries
        run: |
          # 创建构建目录
          mkdir -p dist
          
          # 构建不同平台的二进制文件
          # Windows amd64
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/atc-windows-amd64.exe .
          
          # Windows arm64
          GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -o dist/atc-windows-arm64.exe .
          
          # Linux amd64
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/atc-linux-amd64 .
          
          # Linux arm64
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o dist/atc-linux-arm64 .
          
          # macOS amd64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/atc-darwin-amd64 .
          
          # macOS arm64 (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/atc-darwin-arm64 .

      - name: Create checksums
        run: |
          cd dist
          sha256sum * > checksums.txt

      - name: Generate release notes
        id: release_notes
        run: |
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # 生成变更日志
          echo "## 🚀 新功能特性" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### 📋 变更内容 ($PREVIOUS_TAG...${{ steps.version.outputs.VERSION }})" >> release_notes.md
            echo "" >> release_notes.md
            
            # 获取提交信息
            git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD >> release_notes.md
            echo "" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "## 📦 下载说明" >> release_notes.md
          echo "" >> release_notes.md
          echo "请根据您的操作系统选择对应的二进制文件：" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Windows" >> release_notes.md
          echo "- **Intel/AMD 64位**: \`atc-windows-amd64.exe\`" >> release_notes.md
          echo "- **ARM 64位**: \`atc-windows-arm64.exe\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Linux" >> release_notes.md
          echo "- **Intel/AMD 64位**: \`atc-linux-amd64\`" >> release_notes.md
          echo "- **ARM 64位**: \`atc-linux-arm64\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### macOS" >> release_notes.md
          echo "- **Intel 芯片**: \`atc-darwin-amd64\`" >> release_notes.md
          echo "- **Apple Silicon (M1/M2/M3)**: \`atc-darwin-arm64\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 🔐 安全验证" >> release_notes.md
          echo "" >> release_notes.md
          echo "下载后请使用 \`checksums.txt\` 文件验证二进制文件的完整性：" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# Linux/macOS" >> release_notes.md
          echo "sha256sum -c checksums.txt" >> release_notes.md
          echo "" >> release_notes.md
          echo "# Windows (PowerShell)" >> release_notes.md
          echo "Get-FileHash atc-windows-amd64.exe -Algorithm SHA256" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 📚 使用说明" >> release_notes.md
          echo "" >> release_notes.md
          echo "详细使用说明请参考项目文档：" >> release_notes.md
          echo "- [中文文档](README_zh.md)" >> release_notes.md
          echo "- [English Documentation](README.md)" >> release_notes.md
          echo "- [项目需求文档](docs/项目需求文档.md)" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ steps.version.outputs.VERSION }}
          path: dist/
          retention-days: 30