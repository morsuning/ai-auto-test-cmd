name: Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送以 'v' 开头的标签

permissions:
  contents: write  # 需要写权限来创建 release

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "以下文件需要格式化："
            gofmt -s -l .
            exit 1
          fi

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: test  # 依赖测试任务成功完成
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，用于生成变更日志

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set build variables
        id: build_vars
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_COMMIT=$(git rev-parse --short HEAD)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_OUTPUT
          echo "GIT_COMMIT=${GIT_COMMIT}" >> $GITHUB_OUTPUT

      - name: Create dist directory
        run: mkdir -p dist

      - name: Build for Windows
        run: |
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.build_vars.outputs.VERSION }} -X main.buildTime=${{ steps.build_vars.outputs.BUILD_TIME }} -X main.gitCommit=${{ steps.build_vars.outputs.GIT_COMMIT }}" -o dist/atc-windows-amd64.exe .
          GOOS=windows GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.build_vars.outputs.VERSION }} -X main.buildTime=${{ steps.build_vars.outputs.BUILD_TIME }} -X main.gitCommit=${{ steps.build_vars.outputs.GIT_COMMIT }}" -o dist/atc-windows-arm64.exe .

      - name: Build for Linux
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.build_vars.outputs.VERSION }} -X main.buildTime=${{ steps.build_vars.outputs.BUILD_TIME }} -X main.gitCommit=${{ steps.build_vars.outputs.GIT_COMMIT }}" -o dist/atc-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.build_vars.outputs.VERSION }} -X main.buildTime=${{ steps.build_vars.outputs.BUILD_TIME }} -X main.gitCommit=${{ steps.build_vars.outputs.GIT_COMMIT }}" -o dist/atc-linux-arm64 .

      - name: Build for macOS
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.build_vars.outputs.VERSION }} -X main.buildTime=${{ steps.build_vars.outputs.BUILD_TIME }} -X main.gitCommit=${{ steps.build_vars.outputs.GIT_COMMIT }}" -o dist/atc-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.build_vars.outputs.VERSION }} -X main.buildTime=${{ steps.build_vars.outputs.BUILD_TIME }} -X main.gitCommit=${{ steps.build_vars.outputs.GIT_COMMIT }}" -o dist/atc-darwin-arm64 .

      - name: Create checksums
        run: |
          cd dist
          sha256sum * > checksums.txt

      - name: Generate release notes
        id: release_notes
        run: |
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ steps.version.outputs.VERSION }}"
          
          # 生成变更日志
          echo "## 🚀 版本 ${CURRENT_TAG}" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### 📋 变更内容 (${PREVIOUS_TAG}...${CURRENT_TAG})" >> release_notes.md
            echo "" >> release_notes.md
            
            # 获取提交范围
            COMMIT_RANGE="${PREVIOUS_TAG}..HEAD"
            
            # 分类收集提交信息
            FEAT_COMMITS=$(git log --pretty=format:"%s" $COMMIT_RANGE | grep -E "^feat(\(.+\))?:" | sed 's/^feat[^:]*: /- /' || true)
            FIX_COMMITS=$(git log --pretty=format:"%s" $COMMIT_RANGE | grep -E "^fix(\(.+\))?:" | sed 's/^fix[^:]*: /- /' || true)
            DOCS_COMMITS=$(git log --pretty=format:"%s" $COMMIT_RANGE | grep -E "^docs(\(.+\))?:" | sed 's/^docs[^:]*: /- /' || true)
            REFACTOR_COMMITS=$(git log --pretty=format:"%s" $COMMIT_RANGE | grep -E "^(refactor|style|perf)(\(.+\))?:" | sed 's/^[^:]*: /- /' || true)
            TEST_COMMITS=$(git log --pretty=format:"%s" $COMMIT_RANGE | grep -E "^test(\(.+\))?:" | sed 's/^test[^:]*: /- /' || true)
            BUILD_COMMITS=$(git log --pretty=format:"%s" $COMMIT_RANGE | grep -E "^(build|ci|chore)(\(.+\))?:" | sed 's/^[^:]*: /- /' || true)
            
            # 其他提交（不符合conventional commits格式的）
            OTHER_COMMITS=$(git log --pretty=format:"%s" $COMMIT_RANGE | grep -vE "^(feat|fix|docs|refactor|style|perf|test|build|ci|chore)(\(.+\))?:" | grep -v "^Merge " | sed 's/^/- /' || true)
            
            # 输出分类的变更内容
            if [ -n "$FEAT_COMMITS" ]; then
              echo "#### 🚀 新功能" >> release_notes.md
              echo "$FEAT_COMMITS" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$FIX_COMMITS" ]; then
              echo "#### 🐛 问题修复" >> release_notes.md
              echo "$FIX_COMMITS" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$REFACTOR_COMMITS" ]; then
              echo "#### 🎨 代码优化" >> release_notes.md
              echo "$REFACTOR_COMMITS" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$DOCS_COMMITS" ]; then
              echo "#### 📚 文档更新" >> release_notes.md
              echo "$DOCS_COMMITS" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$TEST_COMMITS" ]; then
              echo "#### 🧪 测试相关" >> release_notes.md
              echo "$TEST_COMMITS" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$BUILD_COMMITS" ]; then
              echo "#### 🔧 构建/工具" >> release_notes.md
              echo "$BUILD_COMMITS" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            if [ -n "$OTHER_COMMITS" ]; then
              echo "#### 📝 其他变更" >> release_notes.md
              echo "$OTHER_COMMITS" >> release_notes.md
              echo "" >> release_notes.md
            fi
            
            # 获取提交统计信息
            COMMIT_COUNT=$(git rev-list --count $COMMIT_RANGE)
            AUTHOR_COUNT=$(git log --pretty=format:"%an" $COMMIT_RANGE | sort -u | wc -l)
            
            echo "#### 📊 统计信息" >> release_notes.md
            echo "- **提交数量**: ${COMMIT_COUNT}" >> release_notes.md
            echo "- **贡献者**: ${AUTHOR_COUNT}" >> release_notes.md
            echo "- **变更范围**: ${PREVIOUS_TAG}...${CURRENT_TAG}" >> release_notes.md
            echo "" >> release_notes.md
          else
            echo "这是项目的首个正式版本发布！🎉" >> release_notes.md
            echo "" >> release_notes.md
            
            # 获取所有提交的统计
            TOTAL_COMMITS=$(git rev-list --count HEAD)
            echo "#### 📊 项目统计" >> release_notes.md
            echo "- **总提交数**: ${TOTAL_COMMITS}" >> release_notes.md
            echo "- **首次发布**: ${CURRENT_TAG}" >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          echo "## 📦 下载说明" >> release_notes.md
          echo "" >> release_notes.md
          echo "请根据您的操作系统选择对应的二进制文件：" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Windows" >> release_notes.md
          echo "- **Intel/AMD 64位**: \`atc-windows-amd64.exe\`" >> release_notes.md
          echo "- **ARM 64位**: \`atc-windows-arm64.exe\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Linux" >> release_notes.md
          echo "- **Intel/AMD 64位**: \`atc-linux-amd64\`" >> release_notes.md
          echo "- **ARM 64位**: \`atc-linux-arm64\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### macOS" >> release_notes.md
          echo "- **Intel 芯片**: \`atc-darwin-amd64\`" >> release_notes.md
          echo "- **Apple Silicon (M1/M2/M3)**: \`atc-darwin-arm64\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 🔐 安全验证" >> release_notes.md
          echo "" >> release_notes.md
          echo "下载后请使用 \`checksums.txt\` 文件验证二进制文件的完整性：" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# Linux/macOS" >> release_notes.md
          echo "sha256sum -c checksums.txt" >> release_notes.md
          echo "" >> release_notes.md
          echo "# Windows (PowerShell)" >> release_notes.md
          echo "Get-FileHash atc-windows-amd64.exe -Algorithm SHA256" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 📚 使用说明" >> release_notes.md
          echo "" >> release_notes.md
          echo "详细使用说明请参考项目文档：" >> release_notes.md
          echo "- [中文文档](README_zh.md)" >> release_notes.md
          echo "- [English Documentation](README.md)" >> release_notes.md
          echo "- [项目需求文档](docs/项目需求文档.md)" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ steps.version.outputs.VERSION }}
          path: dist/
          retention-days: 30